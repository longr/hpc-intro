Let’s take a closer look at the gcc module. GCC is an extremely widely
used C/C++/Fortran compiler. Tons of software is dependent on the GCC
version, and might not compile or run if the wrong version is
loaded. In this case, there are several different versions
available. How do we load each copy and which copy is the default?

```
{{ site.remote.prompt }} module avail gcc
```
{: .language-bash}

```
------------------------------ /usr/shared_apps/Modules/compilers ------------------------------
gcc/10.2.0         gcc/4.9.2          gcc/6.3.0
gcc/4.8.1(default) gcc/5.2.0          gcc/8.2.0
```
{: .output}

In this case, gcc/4.8.1 has `(default)` next to it. This indicates
that it is the default — if we type `module load gcc`, this is the
copy that will be loaded.

```
{{ site.remote.prompt }} module load gcc

```
{: .language-bash}

```
gcc (GCC) 4.8.1
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
```
{: .output}


So how do we load the non-default copy of a software package? In this case, the only change we need to make is be more specific about the module we are loading. There are six GCC modules; to load a non-default module, the only change we need to make to our module load command is to leave in the version number after the /.

```
{{ site.remote.prompt }} module load gcc/10.2.0

```
{: .language-bash}

```
gcc (GCC) 10.2.0
Copyright (C) 2020 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
```
{: .output}

We now have successfully switched from GCC 4.8.1 to GCC 10.2.0
